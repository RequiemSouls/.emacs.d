#+TITLE: Emacs Config
#+AUTHOR: zhlhz
#+OPTIONS: toc:2
#+DESCRIPTION: zhlhz's personal Emacs config

* TABLE OF CONTENTS                                                 :toc:
- [[#first-loaded][FIRST LOADED]]
  - [[#add-scripts-directory-to-path][add scripts directory to path]]
- [[#package-manager][PACKAGE MANAGER]]
- [[#system-default][SYSTEM DEFAULT]]
- [[#personal-info][PERSONAL INFO]]
- [[#appearance][APPEARANCE]]
  - [[#emacs][emacs]]
  - [[#all-the-icons][all the icons]]
  - [[#theme][theme]]
- [[#dashboard][DASHBOARD]]
- [[#company][COMPANY]]
- [[#evil][EVIL]]
- [[#vertico--consult][VERTICO / CONSULT]]
- [[#which-key][WHICH KEY]]
- [[#org-mode][ORG MODE]]
  - [[#toc][toc]]
  - [[#indent][indent]]
  - [[#org-tempo][org-tempo]]
- [[#tldr][TLDR]]

* FIRST LOADED
** add scripts directory to path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

* PACKAGE MANAGER
#+BEGIN_SRC emacs-lisp
      (defvar elpaca-installer-version 0.7)
      (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
      (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
      (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
      (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				    :ref nil
				    :files (:defaults (:exclude "extensions"))
				    :build (:not elpaca--activate-package)))
      (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	     (build (expand-file-name "elpaca/" elpaca-builds-directory))
	     (order (cdr elpaca-order))
	     (default-directory repo))
	(add-to-list 'load-path (if (file-exists-p build) build repo))
	(unless (file-exists-p repo)
	  (make-directory repo t)
	  (when (< emacs-major-version 28) (require 'subr-x))
	  (condition-case-unless-debug err
	      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		       ((zerop (call-process "git" nil buffer t "clone"
					     (plist-get order :repo) repo)))
		       ((zerop (call-process "git" nil buffer t "checkout"
					     (or (plist-get order :ref) "--"))))
		       (emacs (concat invocation-directory invocation-name))
		       ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					     "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		       ((require 'elpaca))
		       ((elpaca-generate-autoloads "elpaca" repo)))
		  (progn (message "%s" (buffer-string)) (kill-buffer buffer))
		(error "%s" (with-current-buffer buffer (buffer-string))))
	    ((error) (warn "%s" err) (delete-directory repo 'recursive))))
	(unless (require 'elpaca-autoloads nil t)
	  (require 'elpaca)
	  (elpaca-generate-autoloads "elpaca" repo)
	  (load "./elpaca-autoloads")))
      (add-hook 'after-init-hook #'elpaca-process-queues)
      (elpaca `(,@elpaca-order))

      ;; Install use-package support
      (elpaca elpaca-use-package
	;; Enable :elpaca use-package keyword.
	(elpaca-use-package-mode)
	;; Assume :elpaca t unless otherwise specified.
	(setq elpaca-use-package-by-default t))

      ;; Block until current queue processed.
      (elpaca-wait)

      ;;When installing a package which modifies a form used at the top-level
      ;;(e.g. a package which adds a use-package key word),
      ;;use `elpaca-wait' to block until that package has been installed/configured.
      ;;For example:
      ;;(use-package general :demand t)
      ;;(elpaca-wait)

      ;;Turns off elpaca-use-package-mode current declartion
      ;;Note this will cause the declaration to be interpreted immediately (not deferred).
      ;;Useful for configuring built-in emacs features.
      ;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

      ;; Don't install anything. Defer execution of BODY
      ;;(elpaca nil (message "deferred"))

      (eval-and-compile 
	(setq use-package-always-ensure t)
	(setq use-package-expand-minimally t)
	(setq use-package-enable-imenu-support t))
#+END_SRC

* SYSTEM DEFAULT
#+BEGIN_SRC emacs-lisp
  (defconst sys/macp
    (eq system-type 'darwin))
  (defconst sys/linuxp
    (eq system-type 'gnu/linux))
  (defconst sys/win32p
    (eq system-type 'window-nt))
  (cond (sys/macp
	 (setq mac-option-modifier 'super
	       mac-command-modifier 'meta)))
  (when sys/macp
    (setq command-line-ns-option-alist nil))
  (unless sys/linuxp
    (setq command-line-x-option-alist nil))

  (setq gc-cons-threshold (* 100 1024 1024))
  (setq read-process-output-max (* 5 1024 1024))
  (setq inhibit-compacting-font-caches t)
  (set-language-environment "UTF-8")

  (global-auto-revert-mode 1)
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
  (setq inhibit-startup-message t)
  (setq auto-save-default nil)

  (use-package benchmark-init
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate)) 
  (setq bookmark-file (expand-file-name ".cache/bookmarks" user-emacs-directory))

#+END_SRC

* PERSONAL INFO
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "zhlhz"
	user-mail-address "hzschwarzschild@gmail.com")
#+END_SRC
* APPEARANCE
emacs appearance
** emacs
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (blink-cursor-mode 0)
  (fringe-mode 1)
  (global-hl-line-mode 1)
  ;; set current frame maximized
  (set-frame-parameter nil 'fullscreen 'maximized)
  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  (setq inhibit-startup-screen t)
  (toggle-truncate-lines -1)
  (visual-line-mode -1)

  (delete-selection-mode 1)
  (electric-indent-mode -1)
  (electric-pair-mode 1)
  (add-hook 'org-mode-hook (lambda () (setq-local electric-pair-inhibit-predicate `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

  ;; color compilation buffer
  (defun ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'ansi-colorize-buffer)

  (use-package savehist
:ensure nil
    :hook (after-init . savehist-mode)
    :config
    (setq savehist-file (expand-file-name ".cache/savehist" user-emacs-directory)
	  enable-recursive-minibuffers t
	  history-length 1000
	  savehist-additional-variables '(mark-ring
					  global-mark-ring
					  search-ring
					  regexp-search-ring
					  extended-command-history)
	  savehist-autosave-interval 300)
    )

  (use-package saveplace
:ensure nil
    :init (save-place-mode t)
    :config (setq save-place-file (expand-file-name ".cache/places" user-emacs-directory)))

  (setq recentf-save-file (expand-file-name ".cache/recentf" user-emacs-directory))
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    :hook (emacs-lisp-mode . rainbow-delimiters-mode))
  (use-package pulsar
    :init (pulsar-global-mode t)
    :config
    (setq pulsar-pulse t
	  pulsar-delay 0.055
	  pulsar-iterations 5
	  pulsar-face 'pulsar-magenta
	  pulsar-highlight-face 'pulsar-yellow)
    (pulsar-global-mode 1)
    :hook ((consult-after-jump . pulsar-recenter-top)
	   (consult-after-jump-hook . pulsar-reveal-entry)))
#+end_src
** all the icons
A utility package to collect various Icon Fonts and propertize them within Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC
** theme
use doom-one theme
#+BEGIN_SRC emacs-lisp
  (use-package catppuccin-theme)
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config)
    (load-theme 'catppuccin t))

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init (doom-modeline-mode t)
    :config
    (setq doom-modeline-icon nil
	  doom-modelline-lsp t))

  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
  (set-face-attribute 'default nil
		      :font "Sarasa Mono SC"
		      :height 150
		      :weight 'medium)
  (setq display-time-format "%l:%M %p %b %d W%U"
	display-time-load-average-threshold 0.0)
#+END_SRC

* DASHBOARD
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-center-content t)
    (setq dashboard-banner-logo-title "~ Happy Coding ~")
    (setq dashboard-startup-banner 'logo)
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-items '((recents . 5)
			    (agenda . 5)
			    (bookmarks . 3)
			    (projects . 3)
			    (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))

#+end_src

* MWIM
#+begin_src emacs-lisp
  (use-package mwim 
  :after evil
    :config
    (evil-global-set-key 'insert (kbd "C-a") #'mwim-beginning-of-code-or-line)
    (evil-global-set-key 'insert (kbd "C-e") #'mwim-end-of-code-or-line)
    (evil-global-set-key 'normal (kbd "C-a") #'mwim-beginning-of-code-or-line)
    (evil-global-set-key 'normal (kbd "C-e") #'mwim-end-of-code-or-line))
#+end_src

* COMPANY
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (global-company-mode t)
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-number t)
    (company-tooltip-align-annotations 't))
  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+END_SRC
* EVIL
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-vsplit-window-right t
	  evil-split-window-below t)
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "RET") nil))
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (add-to-list 'evil-collection-mode-list 'help)
    (evil-collection-init)
    (cl-loop for (mode . state) in 
	     '((org-agenda-mode . normal))
	     do (evil-set-initial-state mode state)))
  (use-package undo-tree
    :init
    (setq undo-tree-auto-save-history nil)
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode t))
  (use-package evil-anzu
    :after evil
    :init (global-anzu-mode t))
  (use-package evil-surround
    :init
    (global-evil-surround-mode t))
  (use-package evil-snipe
    :init
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))
  (use-package iedit
    :init (setq iedit-toggle-key-defualt nil)
    :config 
    (define-key iedit-mode-keymap (kbd "M-h") 'iedit-restrict-function)
    (define-key iedit-mode-keymap (kbd "M-i") 'iedit-restrict-current-line)
    )
  (use-package evil-multiedit
    :commands (evil-multiedit-default-keybinds)
    :init
    (evil-multiedit-default-keybinds))
  (defun evil-quick-replace (beg end) 
    (interactive "r")
    (when (evil-visual-state-p) 
      (evil-exit-visual-state) 
      (let ((selection (regexp-quote (buffer-substring-no-properties beg end))))
	(setq command-string (format "%%s /%s//g" selection))
	(minibuffer-with-setup-hook
	    (lambda () (backward-char 2))
	  (evil-ex command-string)))))
#+END_SRC

* SEARCH
#+begin_src emacs-lisp
  (use-package rg
    :if (executable-find "rg"))
#+end_src
* TERMINAL
if vterm display Chinese not correct. check locale `export LANG=zh_CN.UTF-8`
#+begin_src emacs-lisp
  ;;     (use-package vterm
  ;;       :config
  ;;       (setq shell-file-name "/bin/sh"
  ;; 	    vterm-max-scrollback 5000)
  ;; 	(evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  ;; 	(evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  ;; 	(evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  ;; 	(evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert))
  ;; (use-package vterm-module)
  ;;    (use-package vterm-toggle
  ;;      :after (vterm vterm-module)
  ;;      :config
  ;;      (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  ;;      (setq vterm-toggle-fullscreen-p nil)
  ;;      (setq vterm-toggle-scope 'project)
  ;;      (add-to-list 'display-buffer-alist
  ;; 		   '((lambda (buffer-or-name _)
  ;; 		       (let ((buffer (get-buffer buffer-or-name)))
  ;; 			 (with-current-buffer buffer
  ;; 			   (or (equal major-mode 'vterm-mode)
  ;; 			       (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
  ;; 		     (display-buffer-reuse-window display-buffer-at-bottom)
  ;; 		     ;;(display-buffer-reuse-window display-buffer-in-direction)
  ;; 		     ;;display-buffer-in-direction/direction/dedicated is added in emacs27
  ;; 		     (direction . bottom)
  ;; 		     ;;(dedicated . t) ;dedicated is supported in emacs27
  ;; 		     (reusable-frames . visible)
  ;; 		     (window-height . 0.4))))
#+end_src
* SUDO EDIT
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src
* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (when (file-directory-p "~/Documents/projects")
      (setq projectile-project-search-path '("~/Documents/projects")))
    (setq projectile-switch-project-action #'projectile-dired)
  :config (projectile-mode 1)
  (setq projectile-cache-file (expand-file-name ".cache/projectile.cache" user-emacs-directory)
	projectile-enable-caching t)
  (projectile-register-project-type 'xmake '("xmake.lua")
				    :compile "xmake"
				    :run "xmake r")
  (setq projectile-completion-system 'default))
  (defun search-project-for-symbol-at-point ()
    (interactive)
    (if (use-region-p)
	(progn
	  (consult-ripgrep (project-root (project-current))
			   (buffer-substring (region-beginning) (region-end))))
      (progn
	(consult-ripgrep (project-root (project-current)) (thing-at-point 'word 'no-properties)))
      ))
  (defun search-at-point ()
    (interactive)
    (if (use-region-p)
	(progn
	  (consult-line (buffer-substring (region-beginning) (region-end))))
      (progn
	(consult-line (thing-at-point 'word 'no-properties)))
      ))
#+end_src
* VCS
#+begin_src emacs-lisp
(use-package transient)
  (use-package magit
    :init
    :config
    (setq magit-revision-show-gravatars t)
    )

#+end_src
* VERTICO / CONSULT
#+BEGIN_SRC emacs-lisp
  (defun embark-export-write ()
    "Export the current vertico results to a writable buffer if possible.
	Supports exporting consult-grep to wgrep, file to wdeired, and consult-location to occur-edit"
    (interactive)
    (require 'embark)
    (require 'wgrep)
    (let* ((edit-command
	    (pcase-let ((`(,type . ,candidates)
			 (run-hook-with-args-until-success 'embark-candidate-collectors)))
	      (pcase type
		('consult-grep #'wgrep-change-to-wgrep-mode)
		('file #'wdired-change-to-wdired-mode)
		('consult-location #'occur-edit-mode)
		(x (user-error "embark category %S doesn't support writable export" x)))))
	   (embark-after-export-hook `(,@embark-after-export-hook ,edit-command)))
      (embark-export)))
  (use-package vertico
    :init (vertico-mode t)
    :config
    (setq vertico-resize nil
	  vertico-count 17
	  vertico-cycle t)
    (define-key vertico-map (kbd "C-j") 'vertico-next)
    (define-key vertico-map (kbd "C-k") 'vertico-previous)
    )
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)))
  (use-package consult
    :config
    (setq consult-narrow-key "<"
	  consult-line-numbers-widen t
	  consult-async-min-input 2
	  consult-async-refresh-delay 0.15
	  consult-async-input-throttle 0.2
	  consult-async-input-debounce 0.1))
  (use-package embark
    :bind (("C-;" . embark-act)
	   ("C-x C-e" . embark-export-write))
    :config
    (setq prefix-help-command 'embark-prefix-help-command))
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  (use-package marginalia
    :init (marginalia-mode))
  (use-package wgrep)

#+END_SRC
* WHICH KEY
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+END_SRC

* HELPFUL
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-key] . helpful-key)
    ([remap describe-function] . helpful-callback)
    ([remap describe-command] . helpful-command))
#+END_SRC

* DIRED
#+BEGIN_SRC emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
(use-package peep-dired
  :after dired evil
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+END_SRC

* FLYCHECK
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+END_SRC

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (leader-keys
      "SPC" '(execute-extended-command :wk "M-x")
      "." '(find-file :wk "Find file")
      "g g" '(magit :wk "Magit")
      "TAB TAB" '(comment-line :wk "Comment lines"))

    (leader-keys
      "f" '(:ignore t :wk "File")
					  ; "fl" '(counsel-locate :wk "locate file")
      "f d" '(dired-jump :wk "dired current dired")
      "f D" '(dired :wk "dired")
      "f o" '(projectile-find-other-file :wk "switch source file to header file")
      "f f" '(find-file :wk "Find file")
      "f r" '(recentf :wk "Recent file"))

    (leader-keys
      "g" '(:ignore t :wk "magit")
      "gs" '(magit-status :wk "status")
      "gd" '(magit-diff-unstaged :wk "diff unstaged")
      "gc" '(magit-branch-or-checkout :wk "checkout")
      "glc" '(magit-log-current :wk "log current")
      "glf" '(magit-log-buffer-file :wk "log buffer")
      "grb" '(magit-branch :wk "branch")
      "gP" '(magit-push-current :wk "push")
      "gp" '(magit-pull-branch :wk "pull")
      "gf" '(magit-fetch-all :wk "fecth all"))

    (leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Previous buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b c" '(kill-current-buffer :wk "Kill buffer")
      "b i" '(ibuffer :wk "Ibuffer"))

    (leader-keys
      "r" '(:ignore t :wk "Reload/Replace")
      "r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		(ignore (elpaca-process-queues)))
	      :wk "Reload emacs config"))
    (leader-keys
      "p" '(:ignore t :wk "Project")
      "p f" '(projectile-find-file :wk "Find file in Project")
      "p c" '(projectile-compile-project :wk "Project compile")
      "p r" '(projectile-run-project :wk "Project run"))
    (leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t t" '(treemacs :wk "treemacs")
      "t w" '(toggle-truncate-lines :wk "Toggle wrap line")
      "t v" '(vterm-toggle :wk "Toggle vterm")
      "t m" '(toggle-frame-maximized :wk "Toggle frame max size")
      "t M" '(toggle-frame-fullscreen :wk "Toggle frame fullscreen"))

    (leader-keys
      "h" '(:ignore t :wk "Help/Highlight")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe veriable")
      "h k" '(describe-key :wk "Describe key")
      "h m" '(describe-mode :wk "Describe mode")
      "h h" '(symbol-overlay-put :wk "Highlight symbol")
      "h c" '(symbol-overlay-remove-all :wk "Highlight symbol"))

    (leader-keys
      "s" '(:ignore t :wk "Search")
      "s p" '(consult-ripgrep :wk "search in project")
      "s P" '(search-project-for-symbol-at-point :wk "search in project at point")
      "s s" '(consult-line :wk "search in current buffer")
      "s S" '(search-at-point :wk "search in buffer at point")
      "s i" '(consult-imenu :wk "search symbol in current buffer")
      "s I" '(consult-imenu-multi :wk "search symbol in all buffers"))

    (leader-keys
      "w" '(:ignore t :wk "Window")
      "1" '(select-window-1 :wk "Window 1")
      "2" '(select-window-2 :wk "Window 2")
      "3" '(select-window-3 :wk "Window 3")
      "4" '(select-window-4 :wk "Window 4")
      "5" '(select-window-5 :wk "Window 5")
      "w k" '(evil-window-up :wk "window up")
      "w j" '(evil-window-down :wk "window down")
      "w l" '(evil-window-right :wk "window right")
      "w h" '(evil-window-left :wk "window right")
      "w c" '(evil-window-delete :wk "Window delete")
      "w v" '(evil-window-vsplit :wk "Window vsplit")
      "w s" '(evil-window-split :wk "Window split"))
    (leader-keys
      "v" '(er/expand-region :wk "expand region"))
    )


#+end_src
* ORG MODE
** toc
#+BEGIN_SRC  emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org . toc-rog-enable))
#+END_SRC
** indent
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+END_SRC
** org-tempo
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC

* TLDR
#+begin_src emacs-lisp
(use-package tldr)
#+end_src
* LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :init
  (setq lsp-keymap-prefix "C-c l"))
(use-package lsp-treemacs
  :after treemacs
  :commands lsp-treemacs-errors-list)
#+end_src
* TREEMACS
#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
(use-package treemacs-evil
  :after (treemacs evil))
(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-magit
  :after (treemacs magit))
#+end_src
* TOOLS

** EXPAND REGION
#+begin_src emacs-lisp
(use-package expand-region
  :config
  (defadvice er/prepare-for-more-expansions-internal
      (around helm-ag/prepare-for-more-expansions-internal activate)
    ad-do-it
    (let ((new-msg (concat (car ad-return-value)
			   ", / to search in project, "
			   "e iedit mode in functions"
			   "f to search in files, "
			   "r to replace in files, "
			   "b to search in opened buffers"))
	  (new-bindings (cdr ad-return-value)))
      (cl-pushnew
       '("/" (lambda ()
	       (interactive)
	       (call-interactively
		'search-project-for-symbol-at-point)))
       new-bindings)
      (cl-pushnew
       '("e" (lambda ()
	       (interactive)
	       (call-interactively
		'evil-multiedit-match-all)))
       new-bindings)
      (cl-pushnew
       '("f" (lambda ()
	       (interactive)
	       (call-interactively
		'find-file)))
       new-bindings)
      (cl-pushnew
       '("b" (lambda ()
	       (interactive)
	       (call-interactively
		'consult-line)))
       new-bindings)
      (cl-pushnew
       '("r" (lambda ()
	       (interactive)
	       (call-interactively
		'evil-quick-replace)))
       new-bindings)
      (setq ad-return-value (cons new-msg new-bindings)))))
#+end_src

** HIGHLIGHT
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :config
    (define-key symbol-overlay-map (kbd "h") 'nil))
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (setq treesit-font-lock-level 4)
#+end_src

* WINDOW
#+begin_src emacs-lisp
  (use-package window-numbering
    :init
    (window-numbering-mode t))
#+end_src

* LANGUAGE
#+begin_src emacs-lisp
  (use-package lua-mode
    :init
    (setq lua-intent 2))

  (use-package cmake-mode)
  (add-hook 'prog-mode-hook #'lsp)
#+end_src

* TREE-SITTER
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (c "https://github.com/tree-sitter/tree-sitter-c")
       (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
       (lua "https://github.com/tree-sitter-grammars/tree-sitter-lua")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src
